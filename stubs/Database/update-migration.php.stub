<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

/**
 * UpdateDummyStudlyPTable generated by ResourceWizard command line tool.
 * Updates the DummySnakeP table on the database, so it can use the resource structure.
 *
 * @author        Jeova Goncalves <jeova.goncalves1@gmail.com>
 * @copyright (c) 2023, Jeova Goncalves.
 */
class UpdateDummyStudlyPTable extends Migration {

    /**
     * The database connection that should be used by the migration.
     *
     * @var string
     */
    protected $connection = 'mysql';

    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up(): void
    {
        Schema::enableForeignKeyConstraints();
        if (Schema::hasTable('DummySnakeP')) {
            Schema::table('DummySnakeP', function (Blueprint $table) {
                $schemaManager = Schema::getConnection()->getDoctrineSchemaManager();
                $indexesFound  = $schemaManager->listTableIndexes('DummySnakeP');

                /*******************************************************************
                 * Resource General Columns Section                                *
                 ******************************************************************/
                // ID
                if (Schema::hasColumn('DummySnakeP', 'id')) {
                    $table->bigIncrements('id')->unsigned()->first()->change();
                } else {
                    $table->bigIncrements('id')->unsigned()->first();
                }
                // Timestamps
                if (Schema::hasColumn('DummySnakeP', 'created_at')) {
                    $table->timestampTz('created_at')->nullable()->after('id')->change();
                } else {
                    $table->timestampTz('created_at')->nullable()->after('id');
                }
                if (Schema::hasColumn('DummySnakeP', 'updated_at')) {
                    $table->timestampTz('updated_at')->nullable()->after('created_at')->change();
                } else {
                    $table->timestampTz('updated_at')->nullable()->after('created_at');
                }
                // SoftDeletes
                if (Schema::hasColumn('DummySnakeP', 'deleted_at')) {
                    $table->timestampTz('deleted_at')->nullable()->after('updated_at')->change();
                } else {
                    $table->timestampTz('deleted_at')->nullable()->after('updated_at');
                }
                // Creation Logs
                if (Schema::hasColumn('DummySnakeP', 'created_by')) {
                    $table->addColumn('bigInteger', 'created_by', [
                        'autoIncrement' => false,
                        'unsigned' => true
                    ])->nullable()->after('created_at')->change();
                } else {
                    $table->addColumn('bigInteger', 'created_by', [
                        'autoIncrement' => false,
                        'unsigned' => true
                    ])->nullable()->after('created_at');
                }
                if (! array_key_exists('DummySnakeP_created_by_fk', $indexesFound)) {
                    $table->foreign('created_by', 'DummySnakeP_created_by_fk')->references('id')->on('users');
                }
                // Updating Logs
                if (Schema::hasColumn('DummySnakeP', 'updated_by')) {
                    $table->addColumn('bigInteger', 'updated_by', [
                        'autoIncrement' => false,
                        'unsigned' => true
                    ])->nullable()->after('updated_at')->change();
                } else {
                    $table->addColumn('bigInteger', 'updated_by', [
                        'autoIncrement' => false,
                        'unsigned' => true
                    ])->nullable()->after('updated_at');
                }
                if (! array_key_exists('DummySnakeP_updated_by_fk', $indexesFound)) {
                    $table->foreign('updated_by', 'DummySnakeP_updated_by_fk')->references('id')->on('users');
                }
                // Lock Control
                if (Schema::hasColumn('DummySnakeP', 'locked_at')) {
                    $table->timestampTz('locked_at')->nullable()->after('updated_by')->change();
                } else {
                    $table->timestampTz('locked_at')->nullable()->after('updated_by');
                }
                if (Schema::hasColumn('DummySnakeP', 'locked_by')) {
                    $table->addColumn('bigInteger', 'locked_by', [
                        'autoIncrement' => false,
                        'unsigned' => true
                    ])->nullable()->after('locked_at')->change();
                } else {
                    $table->addColumn('bigInteger', 'locked_by', [
                        'autoIncrement' => false,
                        'unsigned' => true
                    ])->nullable()->after('locked_at');
                }
                if (! array_key_exists('DummySnakeP_locked_by_fk', $indexesFound)) {
                    $table->foreign('locked_by', 'DummySnakeP_locked_by_fk')->references('id')->on('users');
                }

                /*******************************************************************
                 * Resource Specific Columns Section                               *
                 ******************************************************************/
                // Add your custom DummySnakeP columns here
            });
        }
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down(): void
    {
        Schema::dropIfExists('DummySnakeP');
    }

}
